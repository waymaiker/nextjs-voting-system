import Head from 'next/head'
import { useAccount } from 'wagmi';
import { Flex, Spinner, Text } from "@chakra-ui/react";

import useEventsProvider from '@/hooks/useEventsProvider';
import useOwnerProvider from '@/hooks/useOwnerProvider';

import { AddVoter } from '@/components/OnlyOwner/AddVoter';
import Layout from '@/components/Layout/Layout'
import VotersContentOwnerView from '@/components/Voters/VotersContentOwnerView';
import VotingSessionStartedView from '@/components/RegisteredVoter/VotingSessionStartedView';
import VotesTailledView from '@/components/RegisteredVoter/VotesTailledView';

import { WORKFLOW_STATUS_VALUE } from '@/utils/constants';
import RegisteringVotersStatusView from '@/components/RegisteredVoter/RegisteringVotersStatusView';
import ProposalsRegistrationStartedView from '@/components/RegisteredVoter/ProposalsRegistrationStartedView';

export default function Home() {
  const { address } = useAccount()
  const { isOwnerConnected } = useOwnerProvider()
  const { isLoading, workflowStatus, registeredVotersList, proposalsListId, proposalsList, winningProposalId } = useEventsProvider()
  const isRegisteredUser = registeredVotersList.length > 0
    && registeredVotersList.find((user) => user.address === address) != undefined
    && !isOwnerConnected

  return (
    <>
      <Head>
        <title>Voting App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <Layout isAGuest={!isOwnerConnected && !isRegisteredUser}>
        {
          isLoading
          ? <Flex grow="1" direction='column' alignItems="center" justifyContent="center">
              <Spinner />
              <Text fontWeight="bold" fontSize='3xl'>
                Transaction in progress ...
              </Text>
            </Flex>
          : <Flex  grow="1" direction="column">
              <Flex  justifyContent="center">
                  {isOwnerConnected && <OwnerView workflowStatus={workflowStatus} />}
                  {isRegisteredUser && <RegisteredVoterView />}
                  {!isOwnerConnected && !isRegisteredUser
                    && WORKFLOW_STATUS_VALUE[workflowStatus.previousStatus] != "VotesTallied"
                    && <GuestView />
                  }
                </Flex>
                {
                  WORKFLOW_STATUS_VALUE[workflowStatus.previousStatus] == "VotesTallied"
                  && <Flex grow="1" alignItems="center" justifyContent="center">
                      <Text fontWeight='bold' fontSize='3xl'> The winning proposal is {winningProposalId} </Text>
                    </Flex>
                }
            </Flex>
        }
        </Layout>
      </>
    </>
  )
}

const OwnerView = ({workflowStatus}) =>
  <Flex direction="column" alignItems="center">
    { WORKFLOW_STATUS_VALUE[workflowStatus.previousStatus] == "RegisteringVoters" && <AddVoter /> }
    <Flex mt="10" direction="column">
      <VotersContentOwnerView />
    </Flex>
  </Flex>

const RegisteredVoterView = () =>
  <Flex direction="column" alignItems="center">
    <RegisteringVotersStatusView />
    <Flex grow="1" justifyItems="center">
      <ProposalsRegistrationStartedView />
      <VotingSessionStartedView />
    </Flex>
  </Flex>

const GuestView = () =>
  <Flex grow="1" direction="column" justifyContent="center" alignItems="center">
    <Text fontSize="2xl" fontWeight="bold"> You are not registered </Text>
    <Text fontSize="2xl" fontWeight="bold">Please, contact the organizer </Text>
  </Flex>
