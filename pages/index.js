import Head from 'next/head'
import { useAccount } from 'wagmi';
import { Flex, Spinner, Text } from "@chakra-ui/react";

import useEventsProvider from '@/hooks/useEventsProvider';
import useOwnerProvider from '@/hooks/useOwnerProvider';

import { AddVoter } from '@/components/OnlyOwner/AddVoter';
import VotersContentOwnerView from '@/components/Voters/VotersContentOwnerView';
import Layout from '@/components/Layout/Layout'
import VotesTailledView from '@/components/RegisteredVoter/VotesTailledView';

import { WORKFLOW_STATUS_VALUE } from '@/utils/constants';
import VotingSessionStartedView from '@/components/RegisteredVoter/VotingSessionStartedView';

export default function Home() {
  const { address } = useAccount()
  const { isOwnerConnected } = useOwnerProvider()
  const { isLoading, workflowStatus, registeredVotersList, proposalsListId, proposalsList, winningProposalId } = useEventsProvider()
  const isRegisteredUser = registeredVotersList.length > 0 
    && registeredVotersList.find((user) => user.address === address) != undefined 
    && !isOwnerConnected

  
  return (
    <>
      <Head>
        <title>Voting App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <Layout>
        {
          isLoading
          ? <Flex grow="1" direction='column' alignItems="center" justifyContent="center">
              <Spinner />
              <Text fontWeight="bold" fontSize='3xl'>
                Transaction in progress ...
              </Text>
            </Flex>
          : <Flex  grow="1" justifyContent="center">
              {isOwnerConnected && <OwnerView registeredVotersList={registeredVotersList} workflowStatus={workflowStatus} />}
              {isRegisteredUser && 
                <RegisteredVoterView 
                  workflowStatus={workflowStatus} 
                  proposalsListId={proposalsListId} 
                  proposalsList={proposalsList} 
                  winningProposalId={winningProposalId}                  
                />
              }
              {!isOwnerConnected && !isRegisteredUser && <GuestView /> }
            </Flex>
        }
        </Layout>
      </>
    </>
  )
}

const OwnerView = ({registeredVotersList, workflowStatus}) =>
  <Flex direction="column" alignItems="center">
    { WORKFLOW_STATUS_VALUE[workflowStatus.previousStatus] == "RegisteringVoters" && <AddVoter /> }
    <Flex mt="10" direction="column">
      <VotersContentOwnerView voters={registeredVotersList} />
    </Flex>
  </Flex>

const RegisteredVoterView = ({workflowStatus, proposalsListId, winningProposalId}) =>
  <Flex direction="column" alignItems="center">
    <RegisteringVotersStatusView />
    <Flex grow="1" justifyItems="center">
      <VotesTailledView />
      <VotingSessionStartedView />
    </Flex>    
  </Flex>

const GuestView = () =>
<Flex direction="column" justifyContent="center" alignItems="center">
  <Flex grow="1" direction="column" justifyContent="center" alignItems="center">
    <Text fontSize="2xl" fontWeight="bold"> You are not registered </Text> 
    <Text fontSize="2xl" fontWeight="bold">Please, contact the organizer </Text> 
  </Flex> 
</Flex>